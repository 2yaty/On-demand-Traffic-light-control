
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000005ba  0000064e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  0000065e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  000016e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091f  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  000030f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  8a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pedestrian_mode>:
}


void pedestrian_mode(void){
	
	if (current_light == 0)
  92:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
  96:	81 11       	cpse	r24, r1
  98:	07 c0       	rjmp	.+14     	; 0xa8 <pedestrian_mode+0x16>
	{
		current_light = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_light>
		last_light = 0;
  a0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <last_light>
		counter = 0;
  a4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
  a8:	08 95       	ret

000000aa <change_turn>:
	
}

void change_turn (void){
	
	if (counter == 5)
  aa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	51 f4       	brne	.+20     	; 0xc6 <change_turn+0x1c>
	{
		last_light = current_light;
  b2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
  b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <last_light>
		current_light ++;
  ba:	8f 5f       	subi	r24, 0xFF	; 255
		current_light %= 4;
  bc:	83 70       	andi	r24, 0x03	; 3
  be:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_light>

		counter = 0;
  c2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
  c6:	08 95       	ret

000000c8 <initialize_leds>:
	
}



void initialize_leds (void){
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	
	for (int i=0 ; i < 4 ; i++)
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	0e c0       	rjmp	.+28     	; 0xf2 <initialize_leds+0x2a>
	{
		LED_init_t(&cars_traffic_lights [i]);
  d6:	8e 01       	movw	r16, r28
  d8:	00 0f       	add	r16, r16
  da:	11 1f       	adc	r17, r17
  dc:	c8 01       	movw	r24, r16
  de:	88 59       	subi	r24, 0x98	; 152
  e0:	9f 4f       	sbci	r25, 0xFF	; 255
  e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LED_init_t>
		LED_init_t(&pedestrian_traffic_lights[i]);
  e6:	c8 01       	movw	r24, r16
  e8:	80 5a       	subi	r24, 0xA0	; 160
  ea:	9f 4f       	sbci	r25, 0xFF	; 255
  ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LED_init_t>



void initialize_leds (void){
	
	for (int i=0 ; i < 4 ; i++)
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	c4 30       	cpi	r28, 0x04	; 4
  f4:	d1 05       	cpc	r29, r1
  f6:	7c f3       	brlt	.-34     	; 0xd6 <initialize_leds+0xe>
		LED_init_t(&cars_traffic_lights [i]);
		LED_init_t(&pedestrian_traffic_lights[i]);
	}
	
	
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <turn_all_leds_off>:

void turn_all_leds_off(void){
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
	
	for (int i=0 ; i < 4 ; i++){
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	0e c0       	rjmp	.+28     	; 0x12c <turn_all_leds_off+0x2a>
		
		LED_off_t(&cars_traffic_lights [i]);
 110:	8e 01       	movw	r16, r28
 112:	00 0f       	add	r16, r16
 114:	11 1f       	adc	r17, r17
 116:	c8 01       	movw	r24, r16
 118:	88 59       	subi	r24, 0x98	; 152
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	0e 94 02 01 	call	0x204	; 0x204 <LED_off_t>
		LED_off_t(&pedestrian_traffic_lights[i]);
 120:	c8 01       	movw	r24, r16
 122:	80 5a       	subi	r24, 0xA0	; 160
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	0e 94 02 01 	call	0x204	; 0x204 <LED_off_t>
	
}

void turn_all_leds_off(void){
	
	for (int i=0 ; i < 4 ; i++){
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	c4 30       	cpi	r28, 0x04	; 4
 12e:	d1 05       	cpc	r29, r1
 130:	7c f3       	brlt	.-34     	; 0x110 <turn_all_leds_off+0xe>
		
		LED_off_t(&cars_traffic_lights [i]);
		LED_off_t(&pedestrian_traffic_lights[i]);
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <traffic_orgnization>:

void traffic_orgnization (void) {
	

	
	if (current_light ==1 || current_light ==3 )
 13c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	11 f0       	breq	.+4      	; 0x148 <traffic_orgnization+0xc>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	19 f5       	brne	.+70     	; 0x18e <traffic_orgnization+0x52>
	{
		
		LED_toggle_t(&cars_traffic_lights [ current_light ]);
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 59       	subi	r24, 0x98	; 152
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	0e 94 09 01 	call	0x212	; 0x212 <LED_toggle_t>
		LED_on_t(&cars_traffic_lights[last_light]);
 156:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <last_light>
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 59       	subi	r24, 0x98	; 152
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_on_t>
		
		LED_toggle_t(&pedestrian_traffic_lights [ current_light ]);
 168:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	80 5a       	subi	r24, 0xA0	; 160
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	0e 94 09 01 	call	0x212	; 0x212 <LED_toggle_t>
		LED_on_t(&pedestrian_traffic_lights[last_light]);
 17a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <last_light>
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	80 5a       	subi	r24, 0xA0	; 160
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_on_t>
 18c:	14 c0       	rjmp	.+40     	; 0x1b6 <traffic_orgnization+0x7a>
	}
	else {
		turn_all_leds_off();
 18e:	0e 94 81 00 	call	0x102	; 0x102 <turn_all_leds_off>
		LED_on_t(&cars_traffic_lights [ current_light ]);
 192:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 59       	subi	r24, 0x98	; 152
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_on_t>
		LED_on_t(&pedestrian_traffic_lights [ current_light ]);
 1a4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	80 5a       	subi	r24, 0xA0	; 160
 1b0:	9f 4f       	sbci	r25, 0xFF	; 255
 1b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_on_t>
	}
	
	
	counter ++;
 1b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1c0:	08 95       	ret

000001c2 <app_Start>:



void app_Start (void){
	
	initialize_leds();
 1c2:	0e 94 64 00 	call	0xc8	; 0xc8 <initialize_leds>

	TIMER_FUNC_CALL(traffic_orgnization);
 1c6:	8e e9       	ldi	r24, 0x9E	; 158
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 a5 02 	call	0x54a	; 0x54a <TIMER_FUNC_CALL>
	INT0_FUNC_CALL(pedestrian_mode);
 1ce:	89 e4       	ldi	r24, 0x49	; 73
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <INT0_FUNC_CALL>
	
	enable_external_INT0();
 1d6:	0e 94 65 02 	call	0x4ca	; 0x4ca <enable_external_INT0>
	TIMER0_init();
 1da:	0e 94 9e 02 	call	0x53c	; 0x53c <TIMER0_init>
	
	traffic_orgnization();
 1de:	0e 94 9e 00 	call	0x13c	; 0x13c <traffic_orgnization>
	
	while(1){
		change_turn();
 1e2:	0e 94 55 00 	call	0xaa	; 0xaa <change_turn>
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <app_Start+0x20>

000001e8 <LED_init_t>:
}

/************************* same functions as above but for structs *******************************/

void LED_init_t(LED* led){
	DIO_init(led->ledPin , led->ledPort , OUT);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	fc 01       	movw	r30, r24
 1ec:	61 81       	ldd	r22, Z+1	; 0x01
 1ee:	80 81       	ld	r24, Z
 1f0:	0e 94 14 01 	call	0x228	; 0x228 <DIO_init>
 1f4:	08 95       	ret

000001f6 <LED_on_t>:
}


void LED_on_t (LED* led){
	DIO_write(led->ledPin , led->ledPort , HIGH);
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	fc 01       	movw	r30, r24
 1fa:	61 81       	ldd	r22, Z+1	; 0x01
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_write>
 202:	08 95       	ret

00000204 <LED_off_t>:
}


void LED_off_t (LED* led){
	DIO_write(led->ledPin , led->ledPort , LOW);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	61 81       	ldd	r22, Z+1	; 0x01
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_write>
 210:	08 95       	ret

00000212 <LED_toggle_t>:
}


void LED_toggle_t (LED* led){
	DIO_toggle(led->ledPin , led->ledPort);
 212:	fc 01       	movw	r30, r24
 214:	61 81       	ldd	r22, Z+1	; 0x01
 216:	80 81       	ld	r24, Z
 218:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_toggle>
 21c:	08 95       	ret

0000021e <main>:



int main(void)
{
    app_Start();
 21e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <app_Start>
}
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	08 95       	ret

00000228 <DIO_init>:
			return (PIND & (1<<pinNumber))>>pinNumber;
			
		default:
		return ERROR; 
	}
}
 228:	62 34       	cpi	r22, 0x42	; 66
 22a:	51 f1       	breq	.+84     	; 0x280 <DIO_init+0x58>
 22c:	18 f4       	brcc	.+6      	; 0x234 <DIO_init+0xc>
 22e:	61 34       	cpi	r22, 0x41	; 65
 230:	41 f0       	breq	.+16     	; 0x242 <DIO_init+0x1a>
 232:	08 95       	ret
 234:	63 34       	cpi	r22, 0x43	; 67
 236:	09 f4       	brne	.+2      	; 0x23a <DIO_init+0x12>
 238:	42 c0       	rjmp	.+132    	; 0x2be <DIO_init+0x96>
 23a:	64 34       	cpi	r22, 0x44	; 68
 23c:	09 f4       	brne	.+2      	; 0x240 <DIO_init+0x18>
 23e:	5e c0       	rjmp	.+188    	; 0x2fc <DIO_init+0xd4>
 240:	08 95       	ret
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	69 f4       	brne	.+26     	; 0x260 <DIO_init+0x38>
 246:	4a b3       	in	r20, 0x1a	; 26
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	b9 01       	movw	r22, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_init+0x2c>
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	8a 95       	dec	r24
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_init+0x28>
 258:	cb 01       	movw	r24, r22
 25a:	84 2b       	or	r24, r20
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	08 95       	ret
 260:	41 11       	cpse	r20, r1
 262:	6a c0       	rjmp	.+212    	; 0x338 <DIO_init+0x110>
 264:	4a b3       	in	r20, 0x1a	; 26
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_init+0x4a>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_init+0x46>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8a bb       	out	0x1a, r24	; 26
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	69 f4       	brne	.+26     	; 0x29e <DIO_init+0x76>
 284:	47 b3       	in	r20, 0x17	; 23
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_init+0x6a>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_init+0x66>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	87 bb       	out	0x17, r24	; 23
 29c:	08 95       	ret
 29e:	41 11       	cpse	r20, r1
 2a0:	4b c0       	rjmp	.+150    	; 0x338 <DIO_init+0x110>
 2a2:	47 b3       	in	r20, 0x17	; 23
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_init+0x88>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_init+0x84>
 2b4:	cb 01       	movw	r24, r22
 2b6:	80 95       	com	r24
 2b8:	84 23       	and	r24, r20
 2ba:	87 bb       	out	0x17, r24	; 23
 2bc:	08 95       	ret
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	69 f4       	brne	.+26     	; 0x2dc <DIO_init+0xb4>
 2c2:	44 b3       	in	r20, 0x14	; 20
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_init+0xa8>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_init+0xa4>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 2b       	or	r24, r20
 2d8:	84 bb       	out	0x14, r24	; 20
 2da:	08 95       	ret
 2dc:	41 11       	cpse	r20, r1
 2de:	2c c0       	rjmp	.+88     	; 0x338 <DIO_init+0x110>
 2e0:	44 b3       	in	r20, 0x14	; 20
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_init+0xc6>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_init+0xc2>
 2f2:	cb 01       	movw	r24, r22
 2f4:	80 95       	com	r24
 2f6:	84 23       	and	r24, r20
 2f8:	84 bb       	out	0x14, r24	; 20
 2fa:	08 95       	ret
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	69 f4       	brne	.+26     	; 0x31a <DIO_init+0xf2>
 300:	41 b3       	in	r20, 0x11	; 17
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	b9 01       	movw	r22, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_init+0xe6>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_init+0xe2>
 312:	cb 01       	movw	r24, r22
 314:	84 2b       	or	r24, r20
 316:	81 bb       	out	0x11, r24	; 17
 318:	08 95       	ret
 31a:	41 11       	cpse	r20, r1
 31c:	0d c0       	rjmp	.+26     	; 0x338 <DIO_init+0x110>
 31e:	41 b3       	in	r20, 0x11	; 17
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_init+0x104>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_init+0x100>
 330:	cb 01       	movw	r24, r22
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	81 bb       	out	0x11, r24	; 17
 338:	08 95       	ret

0000033a <DIO_write>:
 33a:	62 34       	cpi	r22, 0x42	; 66
 33c:	51 f1       	breq	.+84     	; 0x392 <DIO_write+0x58>
 33e:	18 f4       	brcc	.+6      	; 0x346 <DIO_write+0xc>
 340:	61 34       	cpi	r22, 0x41	; 65
 342:	41 f0       	breq	.+16     	; 0x354 <DIO_write+0x1a>
 344:	08 95       	ret
 346:	63 34       	cpi	r22, 0x43	; 67
 348:	09 f4       	brne	.+2      	; 0x34c <DIO_write+0x12>
 34a:	42 c0       	rjmp	.+132    	; 0x3d0 <DIO_write+0x96>
 34c:	64 34       	cpi	r22, 0x44	; 68
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_write+0x18>
 350:	5e c0       	rjmp	.+188    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 352:	08 95       	ret
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	69 f4       	brne	.+26     	; 0x372 <DIO_write+0x38>
 358:	4b b3       	in	r20, 0x1b	; 27
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_write+0x2c>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_write+0x28>
 36a:	cb 01       	movw	r24, r22
 36c:	84 2b       	or	r24, r20
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	08 95       	ret
 372:	41 11       	cpse	r20, r1
 374:	6a c0       	rjmp	.+212    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 376:	4b b3       	in	r20, 0x1b	; 27
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_write+0x4a>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_write+0x46>
 388:	cb 01       	movw	r24, r22
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	8b bb       	out	0x1b, r24	; 27
 390:	08 95       	ret
 392:	41 30       	cpi	r20, 0x01	; 1
 394:	69 f4       	brne	.+26     	; 0x3b0 <DIO_write+0x76>
 396:	48 b3       	in	r20, 0x18	; 24
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_write+0x6a>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_write+0x66>
 3a8:	cb 01       	movw	r24, r22
 3aa:	84 2b       	or	r24, r20
 3ac:	88 bb       	out	0x18, r24	; 24
 3ae:	08 95       	ret
 3b0:	41 11       	cpse	r20, r1
 3b2:	4b c0       	rjmp	.+150    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3b4:	48 b3       	in	r20, 0x18	; 24
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_write+0x88>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_write+0x84>
 3c6:	cb 01       	movw	r24, r22
 3c8:	80 95       	com	r24
 3ca:	84 23       	and	r24, r20
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	08 95       	ret
 3d0:	41 30       	cpi	r20, 0x01	; 1
 3d2:	69 f4       	brne	.+26     	; 0x3ee <DIO_write+0xb4>
 3d4:	45 b3       	in	r20, 0x15	; 21
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_write+0xa8>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_write+0xa4>
 3e6:	cb 01       	movw	r24, r22
 3e8:	84 2b       	or	r24, r20
 3ea:	85 bb       	out	0x15, r24	; 21
 3ec:	08 95       	ret
 3ee:	41 11       	cpse	r20, r1
 3f0:	2c c0       	rjmp	.+88     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3f2:	45 b3       	in	r20, 0x15	; 21
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_write+0xc2>
 404:	cb 01       	movw	r24, r22
 406:	80 95       	com	r24
 408:	84 23       	and	r24, r20
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	08 95       	ret
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	69 f4       	brne	.+26     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 412:	42 b3       	in	r20, 0x12	; 18
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	82 bb       	out	0x12, r24	; 18
 42a:	08 95       	ret
 42c:	41 11       	cpse	r20, r1
 42e:	0d c0       	rjmp	.+26     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 430:	42 b3       	in	r20, 0x12	; 18
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	80 95       	com	r24
 446:	84 23       	and	r24, r20
 448:	82 bb       	out	0x12, r24	; 18
 44a:	08 95       	ret

0000044c <DIO_toggle>:
 44c:	62 34       	cpi	r22, 0x42	; 66
 44e:	b1 f0       	breq	.+44     	; 0x47c <DIO_toggle+0x30>
 450:	18 f4       	brcc	.+6      	; 0x458 <DIO_toggle+0xc>
 452:	61 34       	cpi	r22, 0x41	; 65
 454:	31 f0       	breq	.+12     	; 0x462 <DIO_toggle+0x16>
 456:	08 95       	ret
 458:	63 34       	cpi	r22, 0x43	; 67
 45a:	e9 f0       	breq	.+58     	; 0x496 <DIO_toggle+0x4a>
 45c:	64 34       	cpi	r22, 0x44	; 68
 45e:	41 f1       	breq	.+80     	; 0x4b0 <DIO_toggle+0x64>
 460:	08 95       	ret
 462:	4b b3       	in	r20, 0x1b	; 27
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_toggle+0x24>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_toggle+0x20>
 474:	cb 01       	movw	r24, r22
 476:	84 27       	eor	r24, r20
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
 47c:	48 b3       	in	r20, 0x18	; 24
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_toggle+0x3e>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_toggle+0x3a>
 48e:	cb 01       	movw	r24, r22
 490:	84 27       	eor	r24, r20
 492:	88 bb       	out	0x18, r24	; 24
 494:	08 95       	ret
 496:	45 b3       	in	r20, 0x15	; 21
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	b9 01       	movw	r22, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_toggle+0x58>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	8a 95       	dec	r24
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_toggle+0x54>
 4a8:	cb 01       	movw	r24, r22
 4aa:	84 27       	eor	r24, r20
 4ac:	85 bb       	out	0x15, r24	; 21
 4ae:	08 95       	ret
 4b0:	42 b3       	in	r20, 0x12	; 18
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_toggle+0x72>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_toggle+0x6e>
 4c2:	cb 01       	movw	r24, r22
 4c4:	84 27       	eor	r24, r20
 4c6:	82 bb       	out	0x12, r24	; 18
 4c8:	08 95       	ret

000004ca <enable_external_INT0>:

void enable_external_INT0(void){
	
	PORTD |=(1<<2) ;
 4ca:	82 b3       	in	r24, 0x12	; 18
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	82 bb       	out	0x12, r24	; 18
	
	GICR = 1<<INT0;
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC01);
 4d4:	85 b7       	in	r24, 0x35	; 53
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC00);
 4da:	85 b7       	in	r24, 0x35	; 53
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	85 bf       	out	0x35, r24	; 53
	sei();
 4e0:	78 94       	sei
 4e2:	08 95       	ret

000004e4 <INT0_FUNC_CALL>:
}
void INT0_FUNC_CALL(void (*callback)(void)){
	
	INT0_callback = callback;
 4e4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <INT0_callback+0x1>
 4e8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <INT0_callback>
 4ec:	08 95       	ret

000004ee <__vector_1>:
}

ISR (INT0_vect){
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	2f 93       	push	r18
 4fa:	3f 93       	push	r19
 4fc:	4f 93       	push	r20
 4fe:	5f 93       	push	r21
 500:	6f 93       	push	r22
 502:	7f 93       	push	r23
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	af 93       	push	r26
 50a:	bf 93       	push	r27
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
	
	INT0_callback();
 510:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <INT0_callback>
 514:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <INT0_callback+0x1>
 518:	09 95       	icall
}
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <TIMER0_init>:

void static (*TIMER0_callback)(void);

void TIMER0_init(void){
	
	TCNT0 = 0;
 53c:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x01;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	89 bf       	out	0x39, r24	; 57
	sei();
 542:	78 94       	sei
	
	TCCR0 = 0x05;
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	83 bf       	out	0x33, r24	; 51
 548:	08 95       	ret

0000054a <TIMER_FUNC_CALL>:
	
}
void TIMER_FUNC_CALL(void (*callback)(void)){

		TIMER0_callback = callback;
 54a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <TIMER0_callback+0x1>
 54e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <TIMER0_callback>
 552:	08 95       	ret

00000554 <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	 if (i == 16)
 576:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 57a:	80 31       	cpi	r24, 0x10	; 16
 57c:	29 f4       	brne	.+10     	; 0x588 <__vector_11+0x34>
	 {
		 TIMER0_callback();
 57e:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <TIMER0_callback>
 582:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <TIMER0_callback+0x1>
 586:	09 95       	icall
	 }

	i %= 16;
 588:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 58c:	8f 70       	andi	r24, 0x0F	; 15
	
	i++;
 58e:	8f 5f       	subi	r24, 0xFF	; 255
 590:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <_exit>:
 5b6:	f8 94       	cli

000005b8 <__stop_program>:
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <__stop_program>
